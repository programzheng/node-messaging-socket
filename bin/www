#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('node-messaging-socket:server');
const http = require('http');
const { Server } = require("socket.io");

/**
 * Models
 */
const { Message } = require('../models/index');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * socketio server
 */
const io = new Server(server, {
  cors: {
    origin: process.env.SOCKETIO_CORS_ORIGIN
  }
});
io.on('connection', async (socket) => {
  console.log(`a user connected socket id: ${socket.id}`)

  //connection emit message
  socket.emit('message', await Message.findAll())

  socket.on("add:message", async (data) => {
    const message = await Message.create({
      socket_id: socket.id,
      message: data.message
    })
    socket.emit('message', await Message.findAll())
    return message;
  })

  socket.on("private message", (anotherSocketId, msg) => {
    socket.to(anotherSocketId).emit("private message", socket.id, msg);
  });

  socket.on("disconnecting", (reason) => {
    console.log(`user disconnecting socket id: ${socket.id}`)
    for (const room of socket.rooms) {
      if (room !== socket.id) {
        socket.to(room).emit("user has left", socket.id);
      }
    }
  })

  socket.on('disconnect', () => {
      console.log(`user disconnected socket id: ${socket.id}`)
  })

  return socket.id
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
